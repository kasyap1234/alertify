// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: alerts.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAlert = `-- name: CreateAlert :one
INSERT INTO alerts (product_id,alert_message,alert_type,status) VALUES ($1,$2,$3,$4) RETURNING  id, product_id, alert_message, alert_type, status, created_at
`

type CreateAlertParams struct {
	ProductID    pgtype.Int4
	AlertMessage string
	AlertType    interface{}
	Status       interface{}
}

func (q *Queries) CreateAlert(ctx context.Context, arg CreateAlertParams) (Alert, error) {
	row := q.db.QueryRow(ctx, createAlert,
		arg.ProductID,
		arg.AlertMessage,
		arg.AlertType,
		arg.Status,
	)
	var i Alert
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.AlertMessage,
		&i.AlertType,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const listAllAlerts = `-- name: ListAllAlerts :many
SELECT id, product_id, alert_message, alert_type, status, created_at FROM alerts ORDER BY created_at DESC
`

func (q *Queries) ListAllAlerts(ctx context.Context) ([]Alert, error) {
	rows, err := q.db.Query(ctx, listAllAlerts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Alert
	for rows.Next() {
		var i Alert
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.AlertMessage,
			&i.AlertType,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
